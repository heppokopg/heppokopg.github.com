<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[へっぽこエンジニアの日誌]]></title>
  <link href="http://heppokopg.github.io/atom.xml" rel="self"/>
  <link href="http://heppokopg.github.io/"/>
  <updated>2014-02-24T17:08:24+09:00</updated>
  <id>http://heppokopg.github.io/</id>
  <author>
    <name><![CDATA[Heppoko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac OS Xでdockerを使う]]></title>
    <link href="http://heppokopg.github.io/blog/2014/02/24/boot2docker/"/>
    <updated>2014-02-24T16:59:00+09:00</updated>
    <id>http://heppokopg.github.io/blog/2014/02/24/boot2docker</id>
    <content type="html"><![CDATA[<p>dockerをmacで使いやすくなったので、試してみる。
brewで入れられるようなので、それで。</p>

<p>流れとしては、</p>

<ol>
<li>brewのアップデート</li>
<li>brewによるインストール</li>
<li>環境変数の設定</li>
</ol>


<p>という感じで。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew update
</span><span class='line'>$ brew install boot2docker
</span><span class='line'>$ export DOCKER_HOST=tcp://
</span><span class='line'>$ boot2docker init
</span><span class='line'>$ boot2docker up</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef-soloでRails環境を作る]]></title>
    <link href="http://heppokopg.github.io/blog/2014/01/08/chef-soloderailshuan-jing-wozuo-ru/"/>
    <updated>2014-01-08T23:26:00+09:00</updated>
    <id>http://heppokopg.github.io/blog/2014/01/08/chef-soloderailshuan-jing-wozuo-ru</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef-soloでRails環境を、Vagrantでテストしつつ、さくらVPSに構築する]]></title>
    <link href="http://heppokopg.github.io/blog/2014/01/08/chef-solo/"/>
    <updated>2014-01-08T23:26:00+09:00</updated>
    <id>http://heppokopg.github.io/blog/2014/01/08/chef-solo</id>
    <content type="html"><![CDATA[<h1>chef-soloでRails環境を、Vagrantでテストしつつ、さくらVPSに構築する</h1>

<p>chef soloで実用するための</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryのoffsetで正確な値を取得する]]></title>
    <link href="http://heppokopg.github.io/blog/2013/12/10/jquery-offset/"/>
    <updated>2013-12-10T00:18:00+09:00</updated>
    <id>http://heppokopg.github.io/blog/2013/12/10/jquery-offset</id>
    <content type="html"><![CDATA[<p>jQueryのoffsetを使って、topの値を取得しようとした時、想定と違った値がかえってくることがある。
それは、onReadyで実行した場合。
onReadyでは、画像の読み込みが終わる前に実行されるので、画像の高さ分がずれることがある。</p>

<p>対策としては、javascriptのonloadを使うことだが、onloadとonreadyで競合するので、イベントを追加することで対応する。
具体的なコードとしては、こんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jQuery.event.add(window, "load", function(){ 
</span><span class='line'>  var hoge = $("#hoge").offset.top;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=heppokopg0a-22&o=9&p=8&l=as1&asins=4048913913&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyからgoogle analyticsのデータを取得する]]></title>
    <link href="http://heppokopg.github.io/blog/2013/12/07/ruby-analytics/"/>
    <updated>2013-12-07T01:42:00+09:00</updated>
    <id>http://heppokopg.github.io/blog/2013/12/07/ruby-analytics</id>
    <content type="html"><![CDATA[<p><a href="https://code.google.com/apis/console">google apis console</a>にアクセスし、プロジェクトを作成。
その後、serviceメニューからanalytics apiをonにする。
API Accessメニューから、アプリを作成し、Certificateでアカウントを作成する。
作成時にできた<strong>privatekey.p12</strong>をダウンロードしておく。</p>

<p>アカウント作成時のアドレス<strong>yourapp@developer.gserviceaccount.com</strong>をanalyticsのユーザーとして登録。</p>

<p>これで準備は完了。</p>

<p>ライブラリをインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install google-api-client</span></code></pre></td></tr></table></div></figure>


<p>サンプルを使う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Inspired by https://gist.github.com/3166610
</span><span class='line'>require 'google/api_client'
</span><span class='line'>require 'date'
</span><span class='line'>
</span><span class='line'># Update these to match your own apps credentials
</span><span class='line'>service_account_email = 'yourapp@developer.gserviceaccount.com' # Email of service account
</span><span class='line'>key_file = 'privatekey.p12' # File containing your private key
</span><span class='line'>key_secret = 'notasecret' # Password to unlock private key
</span><span class='line'>profileID = '123456' # Analytics profile ID.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>client = Google::APIClient.new()
</span><span class='line'>
</span><span class='line'># Load our credentials for the service account
</span><span class='line'>key = Google::APIClient::KeyUtils.load_from_pkcs12(key_file, key_secret)
</span><span class='line'>client.authorization = Signet::OAuth2::Client.new(
</span><span class='line'>  :token_credential_uri =&gt; 'https://accounts.google.com/o/oauth2/token',
</span><span class='line'>  :audience =&gt; 'https://accounts.google.com/o/oauth2/token',
</span><span class='line'>  :scope =&gt; 'https://www.googleapis.com/auth/analytics.readonly',
</span><span class='line'>  :issuer =&gt; service_account_email,
</span><span class='line'>  :signing_key =&gt; key)
</span><span class='line'>
</span><span class='line'># Request a token for our service account
</span><span class='line'>client.authorization.fetch_access_token!
</span><span class='line'>
</span><span class='line'>analytics = client.discovered_api('analytics','v3')
</span><span class='line'>
</span><span class='line'>startDate = DateTime.now.prev_month.strftime("%Y-%m-%d")
</span><span class='line'>endDate = DateTime.now.strftime("%Y-%m-%d")
</span><span class='line'>
</span><span class='line'>visitCount = client.execute(:api_method =&gt; analytics.data.ga.get, :parameters =&gt; { 
</span><span class='line'>  'ids' =&gt; "ga:" + profileID, 
</span><span class='line'>  'start-date' =&gt; startDate,
</span><span class='line'>  'end-date' =&gt; endDate,
</span><span class='line'>  'metrics' =&gt; "ga:visits",
</span><span class='line'>})
</span></code></pre></td></tr></table></div></figure>


<p>プロファイルIDは日本語のanalytics画面だと、「ビュー ID
」となっているので、注意が必要。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=heppokopg0a-22&o=9&p=8&l=as1&asins=B00CIR1QEC&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debuggerのinstallに失敗した時の対処法]]></title>
    <link href="http://heppokopg.github.io/blog/2013/12/03/debugger-install/"/>
    <updated>2013-12-03T23:18:00+09:00</updated>
    <id>http://heppokopg.github.io/blog/2013/12/03/debugger-install</id>
    <content type="html"><![CDATA[<p>boxenとrbenv使用時にdebuggerのインストールでコケた。
以下がエラー内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>checking for rb_method_entry_t.called_id in method.h... no
</span><span class='line'>checking for rb_control_frame_t.method_id in method.h... no
</span><span class='line'>checking for rb_method_entry_t.called_id in method.h... no
</span><span class='line'>checking for rb_control_frame_t.method_id in method.h... no
</span><span class='line'>Makefile creation failed
</span><span class='line'>**************************************************************************
</span><span class='line'>No source for ruby-2.0.0-p353 provided with debugger-ruby_core_source gem.
</span><span class='line'>**************************************************************************
</span><span class='line'>*** extconf.rb failed ***
</span><span class='line'>Could not create Makefile due to some reason, probably lack of necessary
</span><span class='line'>libraries and/or headers.  Check the mkmf.log file for more details.  You may
</span><span class='line'>need configuration options.
</span><span class='line'>
</span><span class='line'>Provided configuration options:
</span><span class='line'>     --with-opt-dir
</span><span class='line'>     --without-opt-dir
</span><span class='line'>     --with-opt-include
</span><span class='line'>     --without-opt-include=${opt-dir}/include
</span><span class='line'>     --with-opt-lib
</span><span class='line'>     --without-opt-lib=${opt-dir}/lib
</span><span class='line'>     --with-make-prog
</span><span class='line'>     --without-make-prog
</span><span class='line'>     --srcdir=.
</span><span class='line'>     --curdir
</span><span class='line'>     --ruby=/opt/boxen/rbenv/versions/2.0.0-p353/bin/ruby
</span><span class='line'>     --with-ruby-dir
</span><span class='line'>     --without-ruby-dir
</span><span class='line'>     --with-ruby-include
</span><span class='line'>     --without-ruby-include=${ruby-dir}/include
</span><span class='line'>     --with-ruby-lib
</span><span class='line'>     --without-ruby-lib=${ruby-dir}/
</span></code></pre></td></tr></table></div></figure>


<p>以下が対処法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install debugger-ruby_core_source --no-rdoc --no-ri -- --with-ruby-include=/opt/boxen/rbenv/versions/2.0.0-p353
</span><span class='line'>gem install debugger-linecache -- --with-ruby-include=/opt/boxen/rbenv/versions/2.0.0-p353</span></code></pre></td></tr></table></div></figure>


<p>で、改めてdebuggerをインストールしなおす。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=heppokopg0a-22&o=9&p=8&l=as1&asins=4774146633&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsで接続するcharetを指定する]]></title>
    <link href="http://heppokopg.github.io/blog/2013/11/29/rails-charet/"/>
    <updated>2013-11-29T23:32:00+09:00</updated>
    <id>http://heppokopg.github.io/blog/2013/11/29/rails-charet</id>
    <content type="html"><![CDATA[<p>railsでは、dbに接続するcharsetを指定しないと、エンコーディングがlatin1になってしまうので、
予め指定をしておいく。</p>

<p>config/database.ymlを開く。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  encoding: utf8
</span><span class='line'>  charset: utf8
</span><span class='line'>  collation: utf8_general_ci</span></code></pre></td></tr></table></div></figure>


<p>それぞれに上記を記述する。collationも、あらかじめ指定しておいたほうが、あとから変わらなくていいかもしれないので、とりあえず。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=heppokopg0a-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4274068668" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[parallelで簡単並列処理]]></title>
    <link href="http://heppokopg.github.io/blog/2013/11/28/parallel/"/>
    <updated>2013-11-28T00:03:00+09:00</updated>
    <id>http://heppokopg.github.io/blog/2013/11/28/parallel</id>
    <content type="html"><![CDATA[<p>railsで3万行程度のレコードをダミーデータに書き換えるために、並行処理を行うようにparallelを使ってみた。</p>

<p>Gemfileに以下を記述</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem "parallel"
</span><span class='line'>gem "gimei"</span></code></pre></td></tr></table></div></figure>


<p>そしてインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>今回はUserモデルの名前を偽名に書き換える処理を行ったので、gimeiライブラリもあわせて入れる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>users = User.all
</span><span class='line'>Parallel.each(users, in_threads: 3) do |user|
</span><span class='line'>  user.update_attributes( name: Gimei.new.kanji )
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>スレッドの数を多くすると、コネクションのMAX値を超えてしまうこともあるので、要注意</p>
]]></content>
  </entry>
  
</feed>
